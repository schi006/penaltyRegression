// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_linear_fit
arma::colvec cpp_linear_fit(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _penaltyRegression_cpp_linear_fit(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_linear_fit(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ridge_fit
arma::colvec cpp_ridge_fit(const arma::mat& x, const arma::mat& y, double lambda);
RcppExport SEXP _penaltyRegression_cpp_ridge_fit(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ridge_fit(x, y, lambda));
    return rcpp_result_gen;
END_RCPP
}
// cpp_softmax
arma::colvec cpp_softmax(const arma::colvec x, const arma::colvec y);
RcppExport SEXP _penaltyRegression_cpp_softmax(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_softmax(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lasso_fit
arma::colvec cpp_lasso_fit(const arma::mat x, const arma::colvec y, double lambda, double tol, int max_iters);
RcppExport SEXP _penaltyRegression_cpp_lasso_fit(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP tolSEXP, SEXP max_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iters(max_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lasso_fit(x, y, lambda, tol, max_iters));
    return rcpp_result_gen;
END_RCPP
}
// cpp_predict
arma::colvec cpp_predict(const arma::mat& x, const arma::colvec& beta);
RcppExport SEXP _penaltyRegression_cpp_predict(SEXP xSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_predict(x, beta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_penaltyRegression_cpp_linear_fit", (DL_FUNC) &_penaltyRegression_cpp_linear_fit, 2},
    {"_penaltyRegression_cpp_ridge_fit", (DL_FUNC) &_penaltyRegression_cpp_ridge_fit, 3},
    {"_penaltyRegression_cpp_softmax", (DL_FUNC) &_penaltyRegression_cpp_softmax, 2},
    {"_penaltyRegression_cpp_lasso_fit", (DL_FUNC) &_penaltyRegression_cpp_lasso_fit, 5},
    {"_penaltyRegression_cpp_predict", (DL_FUNC) &_penaltyRegression_cpp_predict, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_penaltyRegression(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
